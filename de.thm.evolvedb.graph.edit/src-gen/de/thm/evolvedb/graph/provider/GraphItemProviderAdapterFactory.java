/**
 */
package de.thm.evolvedb.graph.provider;

import de.thm.evolvedb.graph.util.GraphAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GraphItemProviderAdapterFactory extends GraphAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GraphItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.PropertyGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyGraphItemProvider propertyGraphItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.PropertyGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyGraphAdapter() {
		if (propertyGraphItemProvider == null) {
			propertyGraphItemProvider = new PropertyGraphItemProvider(this);
		}

		return propertyGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.NodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeTypeItemProvider nodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.NodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeTypeAdapter() {
		if (nodeTypeItemProvider == null) {
			nodeTypeItemProvider = new NodeTypeItemProvider(this);
		}

		return nodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.EdgeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeTypeItemProvider edgeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.EdgeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeTypeAdapter() {
		if (edgeTypeItemProvider == null) {
			edgeTypeItemProvider = new EdgeTypeItemProvider(this);
		}

		return edgeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.EdgeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeLabelItemProvider edgeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.EdgeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeLabelAdapter() {
		if (edgeLabelItemProvider == null) {
			edgeLabelItemProvider = new EdgeLabelItemProvider(this);
		}

		return edgeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.NodeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeLabelItemProvider nodeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.NodeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeLabelAdapter() {
		if (nodeLabelItemProvider == null) {
			nodeLabelItemProvider = new NodeLabelItemProvider(this);
		}

		return nodeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.UnionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnionTypeItemProvider unionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.UnionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnionTypeAdapter() {
		if (unionTypeItemProvider == null) {
			unionTypeItemProvider = new UnionTypeItemProvider(this);
		}

		return unionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.NumericType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericTypeItemProvider numericTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.NumericType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericTypeAdapter() {
		if (numericTypeItemProvider == null) {
			numericTypeItemProvider = new NumericTypeItemProvider(this);
		}

		return numericTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.StringType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringTypeItemProvider stringTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.StringType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringTypeAdapter() {
		if (stringTypeItemProvider == null) {
			stringTypeItemProvider = new StringTypeItemProvider(this);
		}

		return stringTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.BooleanType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanTypeItemProvider booleanTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.BooleanType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanTypeAdapter() {
		if (booleanTypeItemProvider == null) {
			booleanTypeItemProvider = new BooleanTypeItemProvider(this);
		}

		return booleanTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.BinaryTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryTypesItemProvider binaryTypesItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.BinaryTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryTypesAdapter() {
		if (binaryTypesItemProvider == null) {
			binaryTypesItemProvider = new BinaryTypesItemProvider(this);
		}

		return binaryTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.ListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListTypeItemProvider listTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.ListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListTypeAdapter() {
		if (listTypeItemProvider == null) {
			listTypeItemProvider = new ListTypeItemProvider(this);
		}

		return listTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.TemporalTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalTypesItemProvider temporalTypesItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.TemporalTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalTypesAdapter() {
		if (temporalTypesItemProvider == null) {
			temporalTypesItemProvider = new TemporalTypesItemProvider(this);
		}

		return temporalTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.UniqueConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniqueConstraintItemProvider uniqueConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.UniqueConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniqueConstraintAdapter() {
		if (uniqueConstraintItemProvider == null) {
			uniqueConstraintItemProvider = new UniqueConstraintItemProvider(this);
		}

		return uniqueConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.PropertyTypeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyTypeConstraintItemProvider propertyTypeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.PropertyTypeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyTypeConstraintAdapter() {
		if (propertyTypeConstraintItemProvider == null) {
			propertyTypeConstraintItemProvider = new PropertyTypeConstraintItemProvider(this);
		}

		return propertyTypeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.PropertyExistenceConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyExistenceConstraintItemProvider propertyExistenceConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.PropertyExistenceConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyExistenceConstraintAdapter() {
		if (propertyExistenceConstraintItemProvider == null) {
			propertyExistenceConstraintItemProvider = new PropertyExistenceConstraintItemProvider(this);
		}

		return propertyExistenceConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.thm.evolvedb.graph.KeyConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyConstraintItemProvider keyConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.thm.evolvedb.graph.KeyConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyConstraintAdapter() {
		if (keyConstraintItemProvider == null) {
			keyConstraintItemProvider = new KeyConstraintItemProvider(this);
		}

		return keyConstraintItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (propertyGraphItemProvider != null)
			propertyGraphItemProvider.dispose();
		if (nodeTypeItemProvider != null)
			nodeTypeItemProvider.dispose();
		if (edgeTypeItemProvider != null)
			edgeTypeItemProvider.dispose();
		if (edgeLabelItemProvider != null)
			edgeLabelItemProvider.dispose();
		if (nodeLabelItemProvider != null)
			nodeLabelItemProvider.dispose();
		if (propertyItemProvider != null)
			propertyItemProvider.dispose();
		if (unionTypeItemProvider != null)
			unionTypeItemProvider.dispose();
		if (numericTypeItemProvider != null)
			numericTypeItemProvider.dispose();
		if (stringTypeItemProvider != null)
			stringTypeItemProvider.dispose();
		if (booleanTypeItemProvider != null)
			booleanTypeItemProvider.dispose();
		if (binaryTypesItemProvider != null)
			binaryTypesItemProvider.dispose();
		if (listTypeItemProvider != null)
			listTypeItemProvider.dispose();
		if (temporalTypesItemProvider != null)
			temporalTypesItemProvider.dispose();
		if (uniqueConstraintItemProvider != null)
			uniqueConstraintItemProvider.dispose();
		if (propertyTypeConstraintItemProvider != null)
			propertyTypeConstraintItemProvider.dispose();
		if (propertyExistenceConstraintItemProvider != null)
			propertyExistenceConstraintItemProvider.dispose();
		if (keyConstraintItemProvider != null)
			keyConstraintItemProvider.dispose();
	}

}
