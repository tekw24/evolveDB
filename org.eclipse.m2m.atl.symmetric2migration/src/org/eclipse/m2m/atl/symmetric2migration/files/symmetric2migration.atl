-- @nsURI Migration=http://www.thm.de/migration
-- @nsURI Symmetric =http://www.sidiff.org/difference/symmetric/1.0
-- @nsURI Mdde=http://www.thm.de/mdde

module symmetric2migration;
create OUT: Migration from IN: Symmetric, IN2: Mdde;

helper context Symmetric!SemanticChangeSet def :isResolvable() : Boolean =
	if thisModule.resolvableRules.includes(self.editRName) then
		true
	else 
		false
	endif;

helper context Symmetric!SemanticChangeSet def :isPartiallyResolvable() : Boolean =
	if thisModule.partiallyResolvableRules.includes(self.editRName) then
		true
	else 
		false
	endif;

helper context Symmetric!SemanticChangeSet def :isNotAutomaticallyResolvable() : Boolean =
	if thisModule.notAutomaticallyResolvableRules.includes(self.editRName) then
		true
	else 
		false
	endif;

helper context Symmetric!SemanticChangeSet def :isNewTable() : Boolean =
	if self.editRName = 'CREATE_Table_IN_Database_Schema_(entites)' then
		true
	else
		false
	endif;


-- ->exists(y| y.table.name = tableName)
helper context Symmetric!SemanticChangeSet def :dependsOnNewTable(tableName : String) : Boolean =
	if self.changes -> exists(e | e.oclIsKindOf(Symmetric!AddObject)) then
		if self.changes ->select(x | x.oclIsTypeOf(Symmetric!AddObject))
       		-> exists(z | z.obj.oclIsKindOf(Symmetric!EObjectSet)) then
			true
		else
			false
		endif
	else
		false
	endif;

--This is a new commment
helper context Symmetric!SemanticChangeSet def :getResovableSMO() : Migration!ResolvableOperator = 
		if self.isNewTable() then
			--thisModule.SemanticChangeSet2newTableSMO(self)
			thisModule.SemanticChangeSet2ResolvableSMO(self)
		else
			thisModule.SemanticChangeSet2ResolvableSMO(self)
		endif;


helper def: symmetric : Symmetric!SymmetricDifference = Symmetric!SymmetricDifference.allInstances()->asSequence().first(); 

--Resolvable
helper def: resolvableRules : Sequence(String) = 
	Sequence{'CREATE_Database_Schema',
			'CREATE_Column_IN_Table_(columns)', 
			'CREATE_ForeignKey_IN_Table_(columns)',
			'SET_ATTRIBUTE_NamedElement_Name',
			'CREATE_PrimaryKey_IN_Table_(columns)',
			'SET_ATTRIBUTE_Column_DefaultValue',
			'SET_ATTRIBUTE_Column_AutoIncrement',
			'CREATE_Table_IN_Database_Schema_(entites)',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_SET_NULL_TO_RESTRICT', 
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_SET_NULL_TO_NO_ACTION',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_SET_NULL_TO_CASCADE',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_RESTRICT_TO_SET_NULL',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_RESTRICT_TO_NO_ACTION', 
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_RESTRICT_TO_CASCADE',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_NO_ACTION_TO_SET_NULL',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_NO_ACTION_TO_RESTRICT', 
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_NO_ACTION_TO_CASCADE',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_CASCADE_TO_SET_NULL',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_CASCADE_TO_RESTRICT',
			'CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_CASCADE_TO_NO_ACTION',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_SET_NULL_TO_RESTRICT',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_SET_NULL_TO_NO_ACTION',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_SET_NULL_TO_CASCADE',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_RESTRICT_TO_SET_NULL',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_RESTRICT_TO_NO_ACTION',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_RESTRICT_TO_CASCADE',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_NO_ACTION_TO_SET_NULL',	
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_NO_ACTION_TO_RESTRICT',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_NO_ACTION_TO_CASCADE',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_CASCADE_TO_SET_NULL',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_CASCADE_TO_RESTRICT',
			'CHANGE_LITERAL_ForeignKey_OnDelete_FROM_CASCADE_TO_NO_ACTION',
			'SET_ATTRIBUTE_ForeignKey_ConstraintName',
			'CREATE_Index_IN_Table_(constraints)',
			'DELETE_Index_IN_Table_(constraints)',
			'DELETE_UniqueConstraint_IN_Table_(constraints)',
			'REMOVE_Column_(constraints)_TGT_ColumnConstraint',
			'SET_REFERENCE_ColumnConstraint_(column)_TGT_Column',
			'CREATE_ColumnConstraint_IN_Constraint_(columns)',
			'DELETE_ColumnConstraint_IN_Constraint_(columns)',
			'ADD_Column_(constraints)_TGT_ColumnConstraint',
			'SET_ATTRIBUTE_ColumnConstraint_Name'
			
			
			
			};

helper def: resolvableEnumType : Map(String, Migration!ResolvableOperatorType) =  
	Map{('CREATE_Table_IN_Database_Schema_(entites)', #CREATE_TABLE),
		('SET_ATTRIBUTE_NamedElement_Name', #RENAME_TABLE),
		('SET_ATTRIBUTE_ColumnConstraint_Name', #RENAME_TABLE),
		('CREATE_Column_IN_Table_(columns)', #CREATE_COLUMN),
		('CREATE_PrimaryKey_IN_Table_(columns)', #CREATE_PRIMARY_KEY),
		('CREATE_ForeignKey_IN_Table_(columns)', #CREATE_FOREIGN_KEY),
		('SET_ATTRIBUTE_Column_DefaultValue', #SET_COLUMN_DEFAULT_VALUE),
		('SET_ATTRIBUTE_Column_AutoIncrement', #SET_COLUMN_AUTO_INCREMENT),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_SET_NULL_TO_RESTRICT', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_SET_NULL_TO_NO_ACTION', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_SET_NULL_TO_CASCADE', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_RESTRICT_TO_SET_NULL', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_RESTRICT_TO_NO_ACTION', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_RESTRICT_TO_CASCADE', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_NO_ACTION_TO_SET_NULL', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_NO_ACTION_TO_RESTRICT', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_NO_ACTION_TO_CASCADE', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_CASCADE_TO_SET_NULL', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_CASCADE_TO_RESTRICT', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnUpdate_FROM_CASCADE_TO_NO_ACTION', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_SET_NULL_TO_RESTRICT', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_SET_NULL_TO_NO_ACTION', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_SET_NULL_TO_CASCADE', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_RESTRICT_TO_SET_NULL', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_RESTRICT_TO_NO_ACTION', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_RESTRICT_TO_CASCADE', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_NO_ACTION_TO_SET_NULL', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_NO_ACTION_TO_RESTRICT', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_NO_ACTION_TO_CASCADE', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_CASCADE_TO_SET_NULL', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_CASCADE_TO_RESTRICT', #CHANGE_REFERENTIAL_ACTION),
		('CHANGE_LITERAL_ForeignKey_OnDelete_FROM_CASCADE_TO_NO_ACTION', #CHANGE_REFERENTIAL_ACTION),
		('SET_ATTRIBUTE_ForeignKey_ConstraintName', #SET_ATTRIBUTE_FOREIGNKEY_CONSTRAINT_NAME),
		('CREATE_Index_IN_Table_(constraints)', #CREATE_INDEX_IN_TABLE),
		('REMOVE_Column_(constraints)_TGT_ColumnConstraint', #REMOVE_CONSTRAINT),
		('DELETE_Index_IN_Table_(constraints)',#REMOVE_CONSTRAINT),
		('DELETE_UniqueConstraint_IN_Table_(constraints)',#REMOVE_CONSTRAINT),
		('SET_REFERENCE_ColumnConstraint_(column)_TGT_Column',#ADD_COLUMN_TO_INDEX),
		('CREATE_ColumnConstraint_IN_Constraint_(columns)',#ADD_COLUMN_TO_INDEX),
		('DELETE_ColumnConstraint_IN_Constraint_(columns)', #REMOVE_CONSTRAINT),
		('ADD_Column_(constraints)_TGT_ColumnConstraint', #ADD_COLUMN_TO_INDEX)
		
		
		
		
	};
	

helper def: partiallyResolvableRules : Sequence(String) = 
	Sequence{'DELETE_Column_IN_Table_(columns)',
			'DELETE_ForeignKey_IN_Table_(columns)', 
			'DELETE_PrimaryKey_IN_Table_(columns)',
			'DELETE_Table_IN_Database_Schema_(entites)',
			'SET_ATTRIBUTE_Column_NotNull',
			'SET_ATTRIBUTE_Column_Size',
			'SET_REFERENCE_ForeignKey_(referencedTable)_TGT_Table',
			'SET_ATTRIBUTE_Column_Unique',
			'SET_ATTRIBUTE_Column_Type',
			'CHANGE_1N_INTO_NM',
			'CHANGE_1N_INTO_NM_PRESERVE',
			'CHANGE_1N_INTO_NM_MOVE',
			'CHANGE_NM_INTO_1N',
			'CHANGE_NM_INTO_1N_PRESERVE',
			'SET_ATTRIBUTE_Column_Size_and_Type',
			'CREATE_UniqueConstraint_IN_Table_(constraints)'
			
			};

helper def: partiallyResolvableEnumType : Map(String, Migration!PartiallyResolvableOperatorType) =  
	Map{('DELETE_Column_IN_Table_(columns)', #DELETE_COLUMN),
		('DELETE_ForeignKey_IN_Table_(columns)', #DELETE_FOREIGN_KEY),
		('DELETE_PrimaryKey_IN_Table_(columns)', #DELETE_PRIMARY_KEY),
		('DELETE_Table_IN_Database_Schema_(entites)', #DELETE_TABLE),
		('SET_ATTRIBUTE_Column_NotNull', #SET_COLUMN_NOT_NULL),
		('SET_ATTRIBUTE_Column_Size', #SET_COLUMN_SIZE),
		('SET_ATTRIBUTE_Column_Unique', #SET_COLUMN_UNIQUE),
		('SET_ATTRIBUTE_Column_Type', #SET_COLUMN_TYPE),
		('SET_ATTRIBUTE_Column_Size_and_Type', #SET_COLUMN_TYPE_AND_SIZE),
		('CREATE_UniqueConstraint_IN_Table_(constraints)', #CREATE_UNIQUE_CONSTRAINT),
		
		
		('SET_REFERENCE_ForeignKey_(referencedTable)_TGT_Table', #SET_FOREIGNKEYS_TARGET_TABLE),
		('CHANGE_1N_INTO_NM', #CHANGE_1N_INTO_NM),
		('CHANGE_1N_INTO_NM_MOVE', #CHANGE_1N_INTO_NM_MOVE),
		('CHANGE_1N_INTO_NM_PRESERVE', #CHANGE_1N_INTO_NM_PRESERVE),
		('CHANGE_NM_INTO_1N', #CHANGE_NM_INTO_1N),
		('CHANGE_NM_INTO_1N_PRESERVE', #CHANGE_NM_INTO_1N_PRESERVE)
		
	};
	
helper def: notAutomaticallyResolvableRules : Sequence(String) = 
	Sequence{'MOVE_PrimaryKey_FROM_Table_(columns)_TO_Table_(columns)',
			'MOVE_ForeignKey_FROM_Table_(columns)_TO_Table_(columns)', 
			'DELETE_PrimaryKey_IN_Table_(columns)',
			'JOIN_tables'
		
			};

helper def: notAutomaticallyResolvableEnumType : Map(String, Migration!NotAutomaticallyResolvableOperatorType) =  
	Map{('MOVE_PrimaryKey_FROM_Table_(columns)_TO_Table_(columns)', #MOVE_PRIMARY_KEY),
		('MOVE_ForeignKey_FROM_Table_(columns)_TO_Table_(columns)', #MOVE_FOREIGN_KEY),
		('MOVE_Column_FROM_Table_(columns)_TO_Table_(columns)', #MOVE_COLUMN),
		('JOIN_tables', #JOIN_TABLE)
		
	};			
			

	--let symmetricDifference : Sequence( Symmetric!SymmetricDifference) =
		--Symmetric!SymmetricDifference.allInstances()->asSequence().first() in symmetricDifference.first();


rule SymmetricDifference2Migration {
	from
		s : Symmetric!SymmetricDifference
	to 
		migration : Migration!Migration (
			--SymmetricDifference <- s,
			uriSymetricDifferenceModel <- s.toString(),
			schemaModificationOperators <- s.changeSets -> 
				collect( e | 
					if e.isResolvable() then e.getResovableSMO() 
					else 
						if e.isPartiallyResolvable() then thisModule.SemanticChangeSet2PartiallyResolvableSMO(e)
						else thisModule.SemanticChangeSet2NotAutomaticallyResolvableSMO(e) endif
					endif) -> asSequence()
			
		)
		
		
}

--> collect( e | thisModule.SemanticChangeSet2SMO(e)) -> asSequence()

unique lazy rule SemanticChangeSet2newTableSMO {
	from
		semanticChangeSet : Symmetric!SemanticChangeSet (semanticChangeSet.isNewTable())
	
	using {
		tableName : String = 'verkehrsweg_grundstueck';
	}
	to 
		smo : Migration!ResolvableOperator (
			description <- semanticChangeSet.description,
			processStatus <- #UNRESOLVED,
			displayName <- thisModule.resolvableEnumType.get(semanticChangeSet.editRName),
			semanticChangeSets <- thisModule.symmetric.changeSets -> select(e | e.dependsOnNewTable(tableName)) 
			
		)
	
}

unique lazy rule SemanticChangeSet2ResolvableSMO {
	from
		semanticChangeSet : Symmetric!SemanticChangeSet (not semanticChangeSet.isNewTable())
	to 
		smo : Migration!ResolvableOperator (
			description <- semanticChangeSet.description,
			processStatus <- #UNRESOLVED,
			displayName <- thisModule.resolvableEnumType.get(semanticChangeSet.editRName),
			semanticChangeSets <- semanticChangeSet 
			
		)
	
}

unique lazy rule SemanticChangeSet2PartiallyResolvableSMO {
	from
		semanticChangeSet : Symmetric!SemanticChangeSet
	to 
		smo : Migration!PartiallyResolvable (
			description <- semanticChangeSet.description,
			processStatus <- #UNRESOLVED,
			displayName <- thisModule.partiallyResolvableEnumType.get(semanticChangeSet.editRName),
			semanticChangeSets <- semanticChangeSet
			
		)
}

unique lazy rule SemanticChangeSet2NotAutomaticallyResolvableSMO {
	from
		semanticChangeSet : Symmetric!SemanticChangeSet
	to 
		smo : Migration!NotAutomaticallyResolvable (
			description <- semanticChangeSet.description,
			processStatus <- #UNRESOLVED,
			displayName <- thisModule.notAutomaticallyResolvableEnumType.get(semanticChangeSet.editRName),
			semanticChangeSets <- semanticChangeSet
			
		)
}



