SemanticChangeSetRenderer_AutoIncrement=Auto Increment
SemanticChangeSetRenderer_Column=Column:
SemanticChangeSetRenderer_COLUMN_MODELA=Column in Model A:
SemanticChangeSetRenderer_COLUMN_MODELB=Column in Model B:
SemanticChangeSetRenderer_ColumnDES=Column 
SemanticChangeSetRenderer_ColumnName=Column Name
SemanticChangeSetRenderer_ColumnType=Column Type
SemanticChangeSetRenderer_CreateTable=Creates the new table 
SemanticChangeSetRenderer_DataType=Data Type
SemanticChangeSetRenderer_DefaultValue=Default Value
SemanticChangeSetRenderer_descriptionSetColumDefaultValue=The DEFAULT constraint is used to set a default value for a column. The default value will be added to all new records, if no other value is specified.
SemanticChangeSetRenderer_descriptionColumnSize= For integer data types, M indicates the maximum display width. The maximum display width is 255. Display width is unrelated to the range of values a type can store, as described in Section 11.1.6, \u201CNumeric Type Attributes\u201D. For floating-point and fixed-point data types, M is the total number of digits that can be stored. As of MySQL 8.0.17, the display width attribute is deprecated for integer data types; you should expect support for it to be removed in a future version of MySQL.
SemanticChangeSetRenderer_descriptionColumnSizeDate=MySQL permits fractional seconds for TIME, DATETIME, and TIMESTAMP values, with up to microseconds (6 digits) precision. The fsp value, if given, must be in the range 0 to 6. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0.
SemanticChangeSetRenderer_descriptionColumnSizeText=The CHAR and VARCHAR types are similar, but differ in the way they are stored and retrieved. They also differ in maximum length and in whether trailing spaces are retained. The CHAR and VARCHAR types are declared with a length that indicates the maximum number of characters you want to store. For example, CHAR(30) can hold up to 30 characters.
SemanticChangeSetRenderer_descriptionColumnSizeDecimal = In a DECIMAL column declaration, the precision and scale can be (and usually is) specified. For example: salary DECIMAL(5,2) In this example, 5 is the precision and 2 is the scale. The precision represents the number of significant digits that are stored for values, and the scale represents the number of digits that can be stored following the decimal point.
SemanticChangeSetRenderer_descriptionMakeColumnUnique = A UNIQUE constraint is an integrity constraint that ensures values in a column or group of columns to be unique.  A UNIQUE constraint can be either a column constraint or a table constraint.
SemanticChangeSetRenderer_descriptionRemoveColumnUnique = A UNIQUE constraint is an integrity constraint that ensures values in a column or group of columns to be unique.  The UNIQUE constraint will be removed.
SemanticChangeSetRenderer_NEW_SIZE=New Size:
SemanticChangeSetRenderer_NEW_TYPE=New Type:
SemanticChangeSetRenderer_New_Table=New Table:
SemanticChangeSetRenderer_newOBJ=New Object: 
SemanticChangeSetRenderer_null=null
SemanticChangeSetRenderer_OLD_FOREIGNKEY=Old ForeignKey
SemanticChangeSetRenderer_OLD_SIZE=Old Size:
SemanticChangeSetRenderer_OLD_TYPE=Old Type:
SemanticChangeSetRenderer_Old_Table=Old Table:
SemanticChangeSetRenderer_Primary=Primary Key 
SemanticChangeSetRenderer_Ref_Key=Referenced Key Column:
SemanticChangeSetRenderer_Ref_Table=Referenced Table:
SemanticChangeSetRenderer_Removed_Elements=Removed Elements
SemanticChangeSetRenderer_Size=Size
SemanticChangeSetRenderer_Table=Table 
SemanticChangeSetRenderer_Unique=Uniqe
